Index: src/main/java/com/jeebase/system/webchat/controller/PdcaController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.jeebase.system.webchat.controller;\r\n\r\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\r\nimport com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;\r\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\r\nimport com.jeebase.common.annotation.auth.NoAuthentication;\r\nimport com.jeebase.common.base.PageResult;\r\nimport com.jeebase.common.base.Result;\r\nimport com.jeebase.system.common.entity.Dict;\r\nimport com.jeebase.system.common.service.IDictService;\r\nimport com.jeebase.system.security.entity.User;\r\nimport com.jeebase.system.security.service.IUserService;\r\nimport com.jeebase.system.webchat.entity.Pdca;\r\nimport com.jeebase.system.webchat.entity.PdcaNo;\r\nimport com.jeebase.system.webchat.entity.Pmis;\r\nimport com.jeebase.system.webchat.mapper.PdcaMapper;\r\nimport com.jeebase.system.webchat.service.PdcaService;\r\nimport com.jeebase.system.webchat.service.PmisService;\r\nimport io.swagger.annotations.Api;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport javax.websocket.server.PathParam;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n/**\r\n * @author 小郭\r\n * @version 1.0\r\n */\r\n@RestController\r\n@RequestMapping(\"/pdca\")\r\n@Slf4j\r\n@Api(tags = \"基础功能维护模块\")\r\npublic class PdcaController {\r\n    @Autowired\r\n    private IDictService dictService;\r\n    @Autowired\r\n    private IUserService userService;\r\n    @Autowired\r\n    private PdcaService pdcaService;\r\n\r\n    @Autowired\r\n    PmisService pmisService;\r\n    @Autowired\r\n    private PdcaMapper pdcaMapper;\r\n\r\n//\r\n//    /**\r\n//     * 查询全部\r\n//     * @return\r\n//     */\r\n//    @PostMapping(\"/test\")\r\n////    @ApiOperation(\"查询全部单独接口\")  //\r\n//    public Result<List<Pdca>> getAll (){\r\n//        List<Pdca> list = pdcaService.list();\r\n//        return new Result().put(list).success(\"成功了\");\r\n//    }\r\n    /**\r\n     * 添加数据\r\n     * @param pdca\r\n     * @return\r\n     */\r\n    @PostMapping(\"/save\")\r\n    @ApiOperation(\"添加\")\r\n    public Result save(  @RequestBody Pdca pdca){\r\n        log.info(\"执行添加===> {}\",pdca);\r\n        String pmisName = pdca.getPmisName();// TODO 根据项目名称，从项目表取出项目id\r\n        LambdaQueryWrapper<Pmis> pmislqw = new LambdaQueryWrapper<>();\r\n        pmislqw.eq(Pmis::getName,pmisName);\r\n        Pmis pmis = pmisService.getOne(pmislqw);\r\n        Long pmisId = pmis.getId();  //项目id\r\n\r\n        String pdmName = pdca.getPdmName();  //根据产品名称在字典表取出产品id，产品负责人id，再根据产品负责人id在user表中取出产品负责人姓名pmpName\r\n        LambdaQueryWrapper<Dict> lqw = new LambdaQueryWrapper<>();\r\n        lqw.eq(Dict::getDictName,pdmName);\r\n        Dict dict = dictService.getOne(lqw);\r\n        Long pdmId = dict.getId();         //产品id\r\n        Long creator = dict.getCreator();  //产品负责人人id\r\n        LambdaQueryWrapper<User> lqw1 = new LambdaQueryWrapper<>();\r\n        lqw1.eq(User::getId,creator);\r\n        User user = userService.getOne(lqw1);\r\n        String pmpName = user.getUserName();  //产品负责人姓名\r\n\r\n\r\n\r\n        Long pdcaId = creator; //根据计划申请人id 在用户表中取出用户姓名放入pdcaName\r\n//        LambdaQueryWrapper<User> lqw2 = new LambdaQueryWrapper<>();\r\n//        lqw1.eq(User::getId,pdcaId);\r\n//        User user2 = userService.getOne(lqw1);\r\n        String pdcaName = user.getUserName();  //申请人姓名\r\n\r\n        String brdName = pdca.getBrdName(); //根据需求名称，从字典表中取出需求id\r\n        LambdaQueryWrapper<Dict> lqw3 = new LambdaQueryWrapper<>();\r\n        lqw3.eq(Dict::getDictName,brdName);\r\n        Dict dict2 = dictService.getOne(lqw);\r\n        Long brdId = dict2.getId();  //需求id\r\n\r\n        pdca.setPmisId(pmisId); //项目id\r\n        pdca.setPdmId(pdmId);   //产品id\r\n        pdca.setPmpId(String.valueOf(creator));    //产品负责人id\r\n        pdca.setPmpName(pmpName); //产品负责人\r\n        pdca.setPdcaName(pdcaName); //计划申请人\r\n        pdca.setPdcaId(pdcaId);\r\n        pdca.setBrdId(brdId);     //需求id\r\n        boolean save = pdcaService.save(pdca);\r\n        if (save)\r\n        {\r\n            return new Result().success(\"添加成功了\");\r\n        }else\r\n        {\r\n            return new Result().error(\"添加失败\");\r\n        }\r\n\r\n    }\r\n    /**\r\n     * 根据id删除数据\r\n     * @param id\r\n     * @return\r\n     */\r\n    @DeleteMapping(\"/{id}\")\r\n    @ApiOperation(\"删除数据\")\r\n    public Result deleteById(Long id){\r\n        log.info(\"背删除人id=== {}\",id);\r\n        //条件构造器\r\n        LambdaUpdateWrapper<Pdca> luw = new LambdaUpdateWrapper<>();\r\n        luw.eq(Pdca::getId,id);\r\n        luw.set(Pdca::getDelFlag,\"1\");    //0不删除，1删除\r\n        boolean b = pdcaService.update(luw);\r\n        if (b)\r\n        {\r\n            return new Result().success(\"删除成功了\");\r\n        }else\r\n        {\r\n            return new Result().error(\"删除失败\");\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 根据id修改\r\n     * @param pdca\r\n     * @return\r\n     */\r\n    @PutMapping\r\n    @ApiOperation(\"修改数据\")\r\n    public Result update(@RequestBody Pdca pdca){\r\n        log.info(\"执行修改数据===》 {}\",pdca);\r\n       boolean b =  pdcaMapper.updates(pdca);\r\n        return new Result().success(b ? \"修改成功\":\"修改失败\");\r\n    }\r\n\r\n    /**\r\n     * 根据条件查询数据\r\n     * @param id\r\n     * @return\r\n     */\r\n    @GetMapping(\"/lists/{id}\")\r\n    @ApiOperation(\"员工查询个人记录\")\r\n    public Result<List<Pdca>> selects(@PathVariable(\"id\") Long id){\r\n        log.info(\"修改人id====》 {}\",id);\r\n        LambdaQueryWrapper<Pdca> lqw = new LambdaQueryWrapper<>();\r\n        lqw.eq(Pdca::getCreator,id);\r\n        lqw.eq(Pdca::getDelFlag,\"0\");\r\n        lqw.orderByAsc(Pdca::getCreateTime);\r\n        List<Pdca> lists =  pdcaMapper.selectList(lqw);\r\n        return new Result<List<Pdca>>().put(lists);\r\n    }\r\n\r\n    /**\r\n     * 分页查询\r\n     * @param pdca\r\n     * @return\r\n     */\r\n    @PostMapping(\"/page\")\r\n    @ApiOperation(\"分页查询\")\r\n    public PageResult<Pdca> selectPages(@RequestBody PdcaNo pdca){\r\n        log.info(\"分页数据===》 {}\",pdca);\r\n                                      /** //项目名          产品名        审核状态            创建人\r\n//        int pageNo, int pageSize, String pmisName, String pdmName, String qaCode, String pdcaName\r\n        ,LocalDate beginDate, LocalDate endDate*/\r\n        String pmisName = pdca.getPmisName();\r\n        String qaCode = pdca.getQaCode();\r\n        String pdcaName = pdca.getPdcaName();\r\n        String pdmName = pdca.getPdmName();\r\n        LocalDate beginDate = pdca.getBeginDate();\r\n        LocalDate endDate = pdca.getEndDate();\r\n        //构造分页构造器\r\n        Page<Pdca> pageinfo = new Page<>(pdca.getPageNo(), pdca.getPageSize());\r\n        LambdaQueryWrapper<Pdca> lqw = new LambdaQueryWrapper<>();\r\n        lqw.eq(qaCode != null , Pdca::getQaCode,qaCode);\r\n        lqw.like(pmisName != null,Pdca::getPmisName,pmisName);\r\n        lqw.like(pdcaName != null, Pdca::getPdcaName , pdcaName);\r\n        lqw.like(pdmName != null, Pdca::getPdmName , pdmName);\r\n        lqw.ge(beginDate != null,Pdca::getCreateTime,beginDate); //大于创建时间\r\n        lqw.le(endDate != null,Pdca::getCreateTime,endDate);   //小于创建时间\r\n        lqw.orderByAsc(Pdca::getCreateTime);\r\n        pdcaService.page(pageinfo,lqw);\r\n\r\n        PageResult<Pdca> pageResult = new PageResult<Pdca>(pageinfo.getTotal(), pageinfo.getRecords());\r\n        return pageResult;\r\n    }\r\n\r\n\r\n    /**\r\n     * 查询字典里列表\r\n     *\r\n     * @param\r\n     * @return\r\n     */\r\n    @GetMapping( \"/separate\")\r\n    @NoAuthentication\r\n    @ApiOperation(\"立项需求项目\")\r\n    public Result<Map<String,List<Dict>>> queryDictList() {\r\n        log.info(\"执行立项需求项目查询\");\r\n        //项目\r\n        List lists = pmisService.selectPmis();\r\n\r\n        //查询产品\r\n        LambdaQueryWrapper<Dict> lqw = new LambdaQueryWrapper<>();\r\n        lqw.select(Dict::getId,Dict::getDictName);\r\n        lqw.eq(Dict::getParentId,1726780464144400385L);\r\n        Map<String, List<Dict>> maps = new HashMap<>();\r\n        List<Dict> dictList = dictService.list(lqw);\r\n        maps.put(\"pdm\",dictList);\r\n\r\n        //查询需求\r\n        LambdaQueryWrapper<Dict> lqw2 = new LambdaQueryWrapper<>();\r\n        lqw2.select(Dict::getId,Dict::getDictName);\r\n        lqw2.eq(Dict::getParentId,1726780543366414338L);\r\n        List<Dict> dictList2 = dictService.list(lqw2);\r\n        maps.put(\"brd\",dictList2);\r\n\r\n        maps.put(\"pmis\",lists);\r\n        return new Result<Map<String,List<Dict>>>().success().put(maps);\r\n    }\r\n\r\n    //审核qaCode  0 通过 1未审核\r\n    @GetMapping(\"/code/{id}\")\r\n    @ApiOperation(\"审核\")\r\n    public Result Audit(Long id){\r\n        log.info(\"背审核人id=== {}\",id);\r\n        LambdaUpdateWrapper<Pdca> luw = new LambdaUpdateWrapper<>();\r\n        luw.eq(Pdca::getId,id);\r\n        luw.set(Pdca::getQaCode,\"0\");\r\n        boolean b = pdcaService.update(luw);\r\n        if (b) {\r\n            return new Result().success(\"成功\");\r\n        }else {\r\n            return new Result().error(\"失败了\");\r\n        }\r\n\r\n    }\r\n\r\n    @GetMapping(\"/finish/{id}\")\r\n    @ApiOperation(\"完成\")\r\n    public Result finish(Long id,String aaa){\r\n        LambdaUpdateWrapper<Pdca> luw = new LambdaUpdateWrapper<>();\r\n        luw.eq(Pdca::getId,id);\r\n        luw.set(Pdca::getFctDate, LocalDateTime.now());\r\n        boolean b = pdcaService.update(luw);\r\n        if (b) {\r\n            return new Result().success(\"成功\");\r\n        }else {\r\n            return new Result().error(\"失败了\");\r\n        }\r\n    }\r\n\r\n//    public static void main(String[] args) {\r\n//        System.out.println(LocalDateTime.now());\r\n//    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/jeebase/system/webchat/controller/PdcaController.java b/src/main/java/com/jeebase/system/webchat/controller/PdcaController.java
--- a/src/main/java/com/jeebase/system/webchat/controller/PdcaController.java	(revision b3167b1a817fc27d3811159bdcc9d1a3aae23b9b)
+++ b/src/main/java/com/jeebase/system/webchat/controller/PdcaController.java	(date 1702280054625)
@@ -22,7 +22,6 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.*;
 
-import javax.websocket.server.PathParam;
 import java.time.LocalDate;
 import java.time.LocalDateTime;
 import java.util.HashMap;
